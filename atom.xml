<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦里有诗和远方</title>
  <icon>https://www.gravatar.com/avatar/03805faced39ddbf2e6978062b1700e7</icon>
  <subtitle>用艺术的眼光发现技术的美</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kingmui.cn/"/>
  <updated>2019-04-10T13:00:55.049Z</updated>
  <id>http://www.kingmui.cn/</id>
  
  <author>
    <name>King Mui</name>
    <email>muikinghk@yahoo.com.hk</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECMAScript 5的严格模式</title>
    <link href="http://www.kingmui.cn/2019/04/10/ECMAScript%205%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.kingmui.cn/2019/04/10/ECMAScript 5的严格模式/</id>
    <published>2019-04-10T08:48:09.000Z</published>
    <updated>2019-04-10T13:00:55.049Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;ECMAScript 5 引入了 &lt;code&gt;strict mode&lt;/code&gt;，现在已经被大多浏览器实现(包括 IE10)。会使 web 浏览器更容易的解析代码(只需要添加 &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt; 在源码的最上面)。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;严格模式不仅仅是一个子集：它的产生是为了形成与正常代码不同的语义。不支持严格模式与支持严格模式的浏览器在执行严格模式代码时会采用不同行为。所以在没有对运行环境展开&lt;strong&gt;特性测试&lt;/strong&gt;来验证对于严格模式相关方面支持的情况下，就算采用了严格模式也不一定会取得预期效果。严格模式代码和非严格模式代码可以共存，因此项目脚本可以渐进式地采用严格模式。&lt;/p&gt;
&lt;p&gt;严格模式对正常的 JavaScript 语义做了一些更改。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;严格模式通过&lt;strong&gt;抛出错误&lt;/strong&gt;来消除了一些原有&lt;strong&gt;静默错误&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;严格模式修复了一些导致 JavaScript 引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下&lt;strong&gt;运行得更快&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;严格模式&lt;strong&gt;禁用了&lt;/strong&gt;在 ECMAScript 的未来版本中可能会定义的一些语法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;非严格模式到严格模式的区别&quot;&gt;&lt;a href=&quot;#非严格模式到严格模式的区别&quot; class=&quot;headerlink&quot; title=&quot;非严格模式到严格模式的区别&quot;&gt;&lt;/a&gt;非严格模式到严格模式的区别&lt;/h3&gt;&lt;p&gt;严格模式同时改变了语法及运行时行为。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>申城四月花争艳，最美樱花绽顾村</title>
    <link href="http://www.kingmui.cn/2019/04/07/%E7%94%B3%E5%9F%8E%E5%9B%9B%E6%9C%88%E8%8A%B1%E4%BA%89%E8%89%B3-%E6%9C%80%E7%BE%8E%E6%A8%B1%E8%8A%B1%E7%BB%BD%E9%A1%BE%E6%9D%91/"/>
    <id>http://www.kingmui.cn/2019/04/07/申城四月花争艳-最美樱花绽顾村/</id>
    <published>2019-04-07T03:31:26.000Z</published>
    <updated>2019-04-10T12:48:02.968Z</updated>
    
    <summary type="html">
    
      &lt;div id=&quot;dplayer0&quot; class=&quot;dplayer hexo-tag-dplayer-mark&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){var player = new DPlayer({&quot;container&quot;:document.getElementById(&quot;dplayer0&quot;),&quot;theme&quot;:&quot;#FADFA3&quot;,&quot;loop&quot;:true,&quot;lang&quot;:&quot;zh-cn&quot;,&quot;video&quot;:{&quot;url&quot;:&quot;http://cdn.kingmui.cn/gucunparkvlog.mp4&quot;}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()&lt;/script&gt;
&lt;p&gt;不是要和你玩捉迷藏&lt;/p&gt;
&lt;p&gt;大朵的云可以作证&lt;/p&gt;
&lt;p&gt;这黄金的花园里&lt;/p&gt;
&lt;p&gt;一条光影斑驳的小路伸向了远方&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://www.kingmui.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="旅游" scheme="http://www.kingmui.cn/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的 Async/Await</title>
    <link href="http://www.kingmui.cn/2019/04/05/JavaScript%20%E7%9A%84%20Async%E5%92%8CAwait/"/>
    <id>http://www.kingmui.cn/2019/04/05/JavaScript 的 Async和Await/</id>
    <published>2019-04-05T09:01:33.000Z</published>
    <updated>2019-04-05T11:34:39.689Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在过去很长的时间里，JavaScript 开发人员在处理异步代码时不得不依赖回调函数来解决。结果，我们中的很多人都经历过回调地域。&lt;/p&gt;
&lt;p&gt;然后我们迎来了 Promise。他们为回调提供了更有组织的替代方案，并且大多数社区很快也都转而使用它们。&lt;/p&gt;
&lt;p&gt;现在，随着最新添加的 Async / Await，我们终于可以编写更高质量的 JavaScript 代码！&lt;/p&gt;
&lt;h3 id=&quot;什么是-Async-Await？&quot;&gt;&lt;a href=&quot;#什么是-Async-Await？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Async/Await？&quot;&gt;&lt;/a&gt;什么是 Async/Await？&lt;/h3&gt;&lt;p&gt;Async / Await 是一个备受期待的 JavaScript 功能，它使异步函数的使用更加愉快和易于理解。它构建在 Promise 之上，并与所有现有的基于 Promise 的 API 兼容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Async - 定义异步函数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;自动把函数转换为 &lt;code&gt;Promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当调用异步函数时，函数返回值会被 &lt;code&gt;resolve&lt;/code&gt; 处理&lt;/li&gt;
&lt;li&gt;异步函数内部可以使用 &lt;code&gt;await&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>认识和使用 Promise</title>
    <link href="http://www.kingmui.cn/2019/04/05/%E8%AE%A4%E8%AF%86%E5%92%8C%E4%BD%BF%E7%94%A8%20Promise/"/>
    <id>http://www.kingmui.cn/2019/04/05/认识和使用 Promise/</id>
    <published>2019-04-05T05:35:53.000Z</published>
    <updated>2019-04-05T11:35:02.274Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。&lt;/p&gt;&lt;/div&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;( &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;...&amp;#125; &lt;span class=&quot;comment&quot;&gt;/* executor */&lt;/span&gt;  );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 构造函数执行时立即调用“处理器函数”（executor function）， &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; 两个函数作为参数传递给“处理器函数”。“处理器函数”内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用 &lt;code&gt;resolve&lt;/code&gt; 函数来将 &lt;code&gt;promise&lt;/code&gt; 状态改成 &lt;code&gt;fulfilled&lt;/code&gt;，要么调用 &lt;code&gt;reject&lt;/code&gt; 函数将 &lt;code&gt;promise&lt;/code&gt; 的状态改为 &lt;code&gt;rejected&lt;/code&gt;。如果在“处理器函数”中抛出一个错误，那么该 &lt;code&gt;promise&lt;/code&gt; 状态为 &lt;code&gt;rejected&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个 Promise 有以下几种状态&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt;: 初始状态，既不是成功，也不是失败状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fulfilled&lt;/code&gt;: 意味着操作成功完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rejected&lt;/code&gt;: 意味着操作失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settled&lt;/code&gt;: 处在 &lt;code&gt;fulfilled&lt;/code&gt; 或 &lt;code&gt;rejected&lt;/code&gt; 状态而不是 &lt;code&gt;pending&lt;/code&gt; 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 &lt;code&gt;Promise.prototype.then&lt;/code&gt; 和 &lt;code&gt;Promise.prototype.catch&lt;/code&gt; 方法返回 &lt;code&gt;promise&lt;/code&gt; 对象， 所以它们&lt;strong&gt;可以被链式调用&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式</title>
    <link href="http://www.kingmui.cn/2019/03/27/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.kingmui.cn/2019/03/27/JavaScript设计模式/</id>
    <published>2019-03-27T13:55:32.000Z</published>
    <updated>2019-04-05T11:06:59.520Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;当然我们可以用一个通俗的说法：设计模式是&lt;strong&gt;解决某个特定场景下对某种问题的解决方案&lt;/strong&gt;。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。&lt;/p&gt;
&lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;单例模式的定义：&lt;strong&gt;保证一个类仅有一个实例&lt;/strong&gt;，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://www.kingmui.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法的复杂度</title>
    <link href="http://www.kingmui.cn/2019/03/26/%E7%AE%97%E6%B3%95%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://www.kingmui.cn/2019/03/26/算法的复杂度/</id>
    <published>2019-03-26T14:15:44.000Z</published>
    <updated>2019-04-05T11:06:59.718Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法（algorithm）的定义&quot;&gt;&lt;a href=&quot;#算法（algorithm）的定义&quot; class=&quot;headerlink&quot; title=&quot;算法（algorithm）的定义&quot;&gt;&lt;/a&gt;算法（algorithm）的定义&lt;/h3&gt;&lt;p&gt;算法是解题方案的准确而完善的描述，是一系列解决问题的清晰指令。其实就是&lt;strong&gt;解决一个问题的完整性描述&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;算法的效率&quot;&gt;&lt;a href=&quot;#算法的效率&quot; class=&quot;headerlink&quot; title=&quot;算法的效率&quot;&gt;&lt;/a&gt;算法的效率&lt;/h3&gt;&lt;p&gt;既然算法是解决问题的描述，而解决同一问题的方法也是多种多样的，只是在这过程中我们所使用的时间或时间以外的代价（计算机消耗的则为内存）不一样。为了更快、更好、更强的提高算法的效率，很多时候一个优秀的算法就在于它与其他实现同一问题的算法相比，在时间和空间（内存）上得到明显的降低。&lt;/p&gt;
&lt;p&gt;算法的效率主要由以下两个复杂度来评估：&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;：评估执行程序所需的&lt;strong&gt;时间&lt;/strong&gt;。可以估算出程序对&lt;strong&gt;处理器&lt;/strong&gt;的使用程度。&lt;br&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：评估执行程序所需的&lt;strong&gt;存储空间&lt;/strong&gt;。可以估算出程序对&lt;strong&gt;计算机内存&lt;/strong&gt;的使用程度。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://www.kingmui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Javascript执行机制</title>
    <link href="http://www.kingmui.cn/2018/11/15/Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.kingmui.cn/2018/11/15/Javascript执行机制/</id>
    <published>2018-11-15T07:35:49.000Z</published>
    <updated>2019-04-05T11:06:59.535Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于-Javascript&quot;&gt;&lt;a href=&quot;#关于-Javascript&quot; class=&quot;headerlink&quot; title=&quot;关于 Javascript&quot;&gt;&lt;/a&gt;关于 Javascript&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Javascript&lt;/code&gt;是一门&lt;strong&gt;单线程&lt;/strong&gt;语言，在最新的&lt;code&gt;HTML5&lt;/code&gt;中提出了&lt;code&gt;Web-Worker&lt;/code&gt;，但&lt;code&gt;Javascript&lt;/code&gt;是单线程这一核心仍未改变。所以一切的&lt;code&gt;Javascript&lt;/code&gt;版”多线程”都是用单线程模拟出来的！&lt;/p&gt;
&lt;h3 id=&quot;Javascript-事件循环&quot;&gt;&lt;a href=&quot;#Javascript-事件循环&quot; class=&quot;headerlink&quot; title=&quot;Javascript 事件循环&quot;&gt;&lt;/a&gt;Javascript 事件循环&lt;/h3&gt;&lt;p&gt;既然 &lt;code&gt;js&lt;/code&gt; 是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理 &lt;code&gt;js&lt;/code&gt; 任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>中文简繁体切换功能的实现</title>
    <link href="http://www.kingmui.cn/2018/09/15/%E4%B8%AD%E6%96%87%E7%AE%80%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.kingmui.cn/2018/09/15/中文简繁体切换功能的实现/</id>
    <published>2018-09-15T07:53:53.000Z</published>
    <updated>2019-04-05T11:06:59.592Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为了能够更好地照顾不同的用户，一些网站会提供简繁两种版本切换，提高用户的体验。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;一般而言，网站要实现简繁字体的切换，需要先准备两套字体库。而基本的思路是：找到当前文字在字体库中的索引，然后根据索引值去另一套字体库中取出对应的文字，从而实现字体的替换。具体逻辑如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Js判断鼠标移入元素的方向</title>
    <link href="http://www.kingmui.cn/2018/07/01/%E4%BD%BF%E7%94%A8Js%E5%88%A4%E6%96%AD%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E5%90%91/"/>
    <id>http://www.kingmui.cn/2018/07/01/使用Js判断鼠标移入元素的方向/</id>
    <published>2018-07-01T10:45:34.000Z</published>
    <updated>2019-04-05T11:06:59.693Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;判断鼠标从元素矩形区域的哪个方向进入的标准为：&lt;br&gt;当鼠标从元素矩形区域外移入元素矩形区域，和鼠标行动轨迹发生交叉的那条边就认为是鼠标进入的方向，例如鼠标从上方往下和上边有交叉，就认为是从上方进入。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;本文要介绍几种方法来判断当鼠标滑入元素时，是从哪个方向进入；滑出元素时，从哪个方向滑出，以此对元素做一些交互效果。&lt;/p&gt;
&lt;h3 id=&quot;求最小值&quot;&gt;&lt;a href=&quot;#求最小值&quot; class=&quot;headerlink&quot; title=&quot;求最小值&quot;&gt;&lt;/a&gt;求最小值&lt;/h3&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://cdn.kingmui.cn/minimumValue.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;该方法是当鼠标滑入元素的时，从事件对象 &lt;code&gt;e&lt;/code&gt; 中获取其位于文档中的坐标 &lt;code&gt;(e.pageX, e.pageY)&lt;/code&gt;，再计算出 x 轴方向坐标减去元素左侧距离文档左侧的距离和 x 轴方向坐标减去元素右侧距离文档左侧的距离，y 轴方向坐标减去元素顶部距离文档顶部的距离和 y 轴方向坐标减去元素底部距离文档顶部的距离，求出这四个数字的绝对值的最小值，即为鼠标进入元素的方向。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//kingmui.github.io/CodeDemo/judgeTheDirectionOfTheMouseSlip/minimumValue/&quot;&gt;在线演示&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//github.com/kingmui/CodeDemo/tree/master/judgeTheDirectionOfTheMouseSlip/minimumValue&quot;&gt;涉及代码&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖(debounce)与函数节流(throttle)</title>
    <link href="http://www.kingmui.cn/2018/06/20/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96(debounce)%E4%B8%8E%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81(throttle)/"/>
    <id>http://www.kingmui.cn/2018/06/20/函数防抖(debounce)与函数节流(throttle)/</id>
    <published>2018-06-20T03:03:39.000Z</published>
    <updated>2019-04-05T11:06:59.708Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于 DOM 操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流(throttle)和函数防抖(debounce)就是为了解决类似需求应运而生的。&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;浏览器的 &lt;code&gt;resize&lt;/code&gt;、&lt;code&gt;scroll&lt;/code&gt;、&lt;code&gt;keypress&lt;/code&gt;、&lt;code&gt;mousemove&lt;/code&gt; 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。&lt;/p&gt;
&lt;p&gt;在开发的过程中，你可能会遇到下面的情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监听 &lt;code&gt;Window&lt;/code&gt; 对象的 &lt;code&gt;resize&lt;/code&gt;，&lt;code&gt;scroll&lt;/code&gt; 事件&lt;/li&gt;
&lt;li&gt;拖拽时监听 &lt;code&gt;mousemove&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文字输入时，对输入字符串进行处理，比如要把 markdwon 转换成 html&lt;/li&gt;
&lt;li&gt;监听文件变化，重启服务&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://www.kingmui.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript如何使用变量设置对象的键名</title>
    <link href="http://www.kingmui.cn/2018/06/19/JavaScript%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%94%AE%E5%90%8D/"/>
    <id>http://www.kingmui.cn/2018/06/19/JavaScript如何使用变量设置对象的键名/</id>
    <published>2018-06-19T07:28:03.000Z</published>
    <updated>2019-04-05T11:06:59.513Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;{thetop: 10}&lt;/code&gt; 是一个有效的对象字面量。代码将创建一个属性名为 &lt;code&gt;thetop&lt;/code&gt; 且值为 &lt;code&gt;10&lt;/code&gt; 的对象。与以下内容相同：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj = &amp;#123;&lt;span class=&quot;attr&quot;&gt;thetop&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;thetop&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES5 及更早版本中，你&lt;font color=&quot;red&quot;&gt;不能直接在对象字面量中使用变量作为属性名称&lt;/font&gt;。唯一的选择是执行以下操作：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>自定义浏览器横向滚动条</title>
    <link href="http://www.kingmui.cn/2018/06/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <id>http://www.kingmui.cn/2018/06/03/自定义浏览器横向滚动条/</id>
    <published>2018-06-03T03:07:20.000Z</published>
    <updated>2019-04-05T11:06:59.722Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;最近在做项目的过程中，遇到了滚动条需要横向滚动的需求，特在此记录下相关的知识点！&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;关于项目需求&quot;&gt;&lt;a href=&quot;#关于项目需求&quot; class=&quot;headerlink&quot; title=&quot;关于项目需求&quot;&gt;&lt;/a&gt;关于项目需求&lt;/h3&gt;&lt;p&gt;横向显示信息流，超出新闻容器宽度的部分隐藏，当鼠标在新闻容器位置滚动时可自动横向滚动。&lt;/p&gt;
&lt;h3 id=&quot;自定义浏览器滚动条样式&quot;&gt;&lt;a href=&quot;#自定义浏览器滚动条样式&quot; class=&quot;headerlink&quot; title=&quot;自定义浏览器滚动条样式&quot;&gt;&lt;/a&gt;自定义浏览器滚动条样式&lt;/h3&gt;&lt;h4 id=&quot;IE浏览器&quot;&gt;&lt;a href=&quot;#IE浏览器&quot; class=&quot;headerlink&quot; title=&quot;IE浏览器&quot;&gt;&lt;/a&gt;IE浏览器&lt;/h4&gt;&lt;p&gt;追溯浏览器对滚动条的自定义，恐怕最早的就是IE浏览器了（好像最开始支持的版本是IE5.5）。下面列出了多个版本的支持性：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
      <category term="CSS3" scheme="http://www.kingmui.cn/tags/CSS3/"/>
    
      <category term="HTML5" scheme="http://www.kingmui.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>filepond API 翻译</title>
    <link href="http://www.kingmui.cn/2018/05/29/filepond%20API%E7%BF%BB%E8%AF%91/"/>
    <id>http://www.kingmui.cn/2018/05/29/filepond API翻译/</id>
    <published>2018-05-29T05:30:45.000Z</published>
    <updated>2019-04-05T11:06:59.544Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;FilePond 文档翻译之API&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;Style&quot;&gt;&lt;a href=&quot;#Style&quot; class=&quot;headerlink&quot; title=&quot;Style&quot;&gt;&lt;/a&gt;Style&lt;/h3&gt;&lt;h4 id=&quot;字体和颜色&quot;&gt;&lt;a href=&quot;#字体和颜色&quot; class=&quot;headerlink&quot; title=&quot;字体和颜色&quot;&gt;&lt;/a&gt;字体和颜色&lt;/h4&gt;&lt;p&gt;FilePond对其布局非常敏感，但字体，颜色，边框半径和填充可以毫无问题地进行微调。&lt;br&gt;FilePond的默认字体被设置为系统字体。这使得它尽可能轻便并且对用户来说更熟悉。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.filepond--root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: -apple-system, BlinkMacSystemFont, &lt;span class=&quot;string&quot;&gt;&#39;Segoe UI&#39;&lt;/span&gt;, Roboto,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Helvetica, Arial, sans-serif, &lt;span class=&quot;string&quot;&gt;&#39;Apple Color Emoji&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Segoe UI Emoji&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;Segoe UI Symbol&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要覆盖FilePond样式，最好通过预先加入 &lt;code&gt;.filepond--root&lt;/code&gt; 根选择器来使样式更加具体。 FilePond选择器尽可能保持非特定性，以使覆盖更容易。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://www.kingmui.cn/tags/HTML5/"/>
    
      <category term="FilePond" scheme="http://www.kingmui.cn/tags/FilePond/"/>
    
  </entry>
  
  <entry>
    <title>filepond简介</title>
    <link href="http://www.kingmui.cn/2018/05/29/filepond%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.kingmui.cn/2018/05/29/filepond简介/</id>
    <published>2018-05-29T02:22:15.000Z</published>
    <updated>2019-04-05T11:06:59.561Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Upload anything, from anywhere.&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;关于-filepond&quot;&gt;&lt;a href=&quot;#关于-filepond&quot; class=&quot;headerlink&quot; title=&quot;关于 filepond&quot;&gt;&lt;/a&gt;关于 &lt;a href=&quot;https://pqina.nl/filepond/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;filepond&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;filepond是一个灵活有趣的JavaScript文件上传库，压缩后仅21KB。可以上传任何内容，不仅优化了图像以获得更快的上传速度，还提供一个出色的，简洁流畅的用户体验。&lt;/p&gt;
&lt;h4 id=&quot;框架适配&quot;&gt;&lt;a href=&quot;#框架适配&quot; class=&quot;headerlink&quot; title=&quot;框架适配&quot;&gt;&lt;/a&gt;框架适配&lt;/h4&gt;&lt;p&gt;由于filepond的核心库是用vanilla JavaScript编写的，因此它可以在任何地方使用。您可以在下方的列表中找到合适的适配器，使您可以更轻松地将FilePond用于您最喜爱的框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pqina/react-filepond&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pqina/vue-filepond&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pqina/ngx-filepond&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnnyasantoss/angularjs-filepond&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Angular 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pqina/jquery-filepond&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://www.kingmui.cn/tags/HTML5/"/>
    
      <category term="FilePond" scheme="http://www.kingmui.cn/tags/FilePond/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli脚手架中webpack配置基础文件详解</title>
    <link href="http://www.kingmui.cn/2018/05/27/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%ADwebpack%E9%85%8D%E7%BD%AE%E5%9F%BA%E7%A1%80%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.kingmui.cn/2018/05/27/vue-cli脚手架中webpack配置基础文件详解/</id>
    <published>2018-05-27T06:06:34.000Z</published>
    <updated>2019-04-05T11:06:59.575Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;vue-cli是构建vue单页应用的脚手架，输入一串指定的命令行从而自动生成vue.js+wepack的项目模板。这其中webpack发挥了很大的作用，它使得我们的代码模块化，引入一些插件帮我们完善功能，例如可以将文件打包压缩，图片转base64等。&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;主体结构&quot;&gt;&lt;a href=&quot;#主体结构&quot; class=&quot;headerlink&quot; title=&quot;主体结构&quot;&gt;&lt;/a&gt;主体结构&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── build/                      &lt;span class=&quot;comment&quot;&gt;# webpack 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── config/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.js                &lt;span class=&quot;comment&quot;&gt;# 项目配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── src/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── main.js                 &lt;span class=&quot;comment&quot;&gt;# 应用入口文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── App.vue                 &lt;span class=&quot;comment&quot;&gt;# 主应用程序组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── components/             &lt;span class=&quot;comment&quot;&gt;# ui 组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── assets/                 &lt;span class=&quot;comment&quot;&gt;# 模块资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── static/                     &lt;span class=&quot;comment&quot;&gt;# 静态资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .babelrc                    &lt;span class=&quot;comment&quot;&gt;# babel 配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .editorconfig               &lt;span class=&quot;comment&quot;&gt;# 缩进，空格/制表符和编辑器的设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .eslintrc.js                &lt;span class=&quot;comment&quot;&gt;# eslint 配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .eslintignore               &lt;span class=&quot;comment&quot;&gt;# eslint 忽略规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .gitignore                  &lt;span class=&quot;comment&quot;&gt;# gitignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .postcssrc.js               &lt;span class=&quot;comment&quot;&gt;# postcss 配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.html                  &lt;span class=&quot;comment&quot;&gt;# index.html 模板&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json                &lt;span class=&quot;comment&quot;&gt;# 构建脚本和依赖关系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── README.md                   &lt;span class=&quot;comment&quot;&gt;# README file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.kingmui.cn/tags/Vue/"/>
    
      <category term="webpack" scheme="http://www.kingmui.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>学习Javascript闭包（Closure）</title>
    <link href="http://www.kingmui.cn/2018/05/05/learning_javascript_closures/"/>
    <id>http://www.kingmui.cn/2018/05/05/learning_javascript_closures/</id>
    <published>2018-05-05T07:52:28.000Z</published>
    <updated>2019-04-10T13:00:55.051Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;闭包是由&lt;strong&gt;函数&lt;/strong&gt;以及&lt;strong&gt;创建该函数的词法环境&lt;/strong&gt;组合而成。&lt;strong&gt;这个环境包含了这个闭包创建时所能访问的所有局部变量&lt;/strong&gt;。 – MDN&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;闭包是有权访问另一个函数作用域的函数。 – 《JavaScript 高级程序设计(第 3 版)》&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为闭包。 – 《JavaScript 权威指南(第 6 版)》&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;当函数可以&lt;strong&gt;记住并访问所在的词法作用域&lt;/strong&gt;时，就产生了闭包，即使函数是在当前词法作用域之外执行。 – 《你不知道的 JavaScript(上卷)》&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另个函数」。 – &lt;a href=&quot;https://www.gracecode.com/posts/2385.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;闭包的秘密&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;闭包就是能够读取其他函数内部变量的函数。 – &lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;要使用闭包，只需要简单地将一个函数定义在另一个函数内部，并将它暴露出来。要暴露一个函数，可以将它返回或者传给其他函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内部函数将能够访问到外部函数作用域中的变量&lt;/strong&gt;，即使外部函数已经执行完毕。&lt;/p&gt;
&lt;p&gt;由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&lt;strong&gt;定义在一个函数内部的函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，在本质上，闭包就是&lt;strong&gt;将函数内部和函数外部连接起来的一座桥梁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来。这显然类似于面向对象编程。在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>起风了</title>
    <link href="http://www.kingmui.cn/2018/03/31/%E8%B5%B7%E9%A3%8E%E4%BA%86/"/>
    <id>http://www.kingmui.cn/2018/03/31/起风了/</id>
    <published>2018-03-31T07:32:37.000Z</published>
    <updated>2019-04-10T12:48:02.984Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;aplayer-FpQKSQbN&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
				&lt;pre class=&quot;aplayer-lrc-content&quot;&gt;[00:20.03]
[00:25.53]君が前に付き合っていた人のこと 当你向我坦白
[00:31.44]僕に打ち明けてくれたとき 你与前任的往事时
[00:37.83]素直に聴いてあげられずに 我不肯好好听下去
[00:43.21]寂しい思いをさせてしまったね 让你觉得难过了吧
[00:48.12]
[00:48.78]すぐにヤキモチ焼くのが僕の悪い癖だって 我明明知道动不动就会吃醋
[00:56.59]分かっていた筈なのに 是自己的坏习惯
[01:01.20]自分勝手な想いが残酷な言葉になって 但还是会胡思乱想
[01:09.06]君を傷付けてた 说出过分的话来，令你伤心
[01:13.97]
[01:14.54]一緒に居られるだけで 只要让我和你在一起就好啊
[01:18.79]手と手を重ね合えるだけで良かったね 只要可以牵着你的手就好啊
[01:26.87]大切な事ほど見慣れた場所で輝くのかもしれない 最珍贵的东西，也许正闪耀在那些习以为常的地方
[01:39.08]君を強く抱きしめたい 我好想紧紧拥抱你
[01:46.00]
[01:55.80]自分のためだけに生きている人が 在这个城市里
[02:01.84]集められたようなこの街で 每个人都好像只为自己而活
[02:08.39]誰かを心から想える幸せをいつまでも忘れたくない 能有人牵挂着我 这种幸福永难忘怀
[02:18.73]
[02:19.25]すぐにヤキモチ焼くとこも好きだよって 你嘲笑说“我也中意你爱吃醋这点呀”
[02:25.28]からかって笑う君に甘えていた 我对你撒娇抗议
[02:31.64]愛していることを言葉以外の方法で 好想现在就用语言之外的方式
[02:39.02]今すぐに伝えたい 表达我对你的爱恋
[02:44.29]
[02:44.95]微笑んでくれた顔も 怒った顔も 无论微笑也好，生气也好
[02:51.47]愛しくて仕方なかったよ 你可爱的脸庞都令我着迷
[02:57.40]打ち明けてくれた過去も 你告诉我的往事也好
[03:01.56]二人が見た青空も忘れない 一起看过的天空也好，我怎么会忘掉
[03:09.98]
[03:34.99]一緒に居られるだけで 只要让我和你在一起就好啊
[03:39.00]手と手を重ね合えるだけで良かったね 只要可以牵着你的手就好啊
[03:47.15]大切な事ほど見慣れた場所で輝くのかもしれない 最珍贵的东西，也许正闪耀在那些习以为常的地方
[03:59.35]
[03:59.88]微笑んでくれた顔も 怒った顔も 无论微笑也好，生气也好
[04:06.31]愛しくて仕方なかったよ 你可爱的脸庞都令我着迷
[04:12.06]君の事が好きだよ 我喜欢你
[04:15.99]これからもずっと君を抱きしめたい 从今往后也想一直拥抱着你
[04:24.51]君を強く抱きしめたい 我好想紧紧拥抱你&lt;/pre&gt;
			&lt;/div&gt;
			&lt;script&gt;
				var ap = new APlayer({
					element: document.getElementById(&quot;aplayer-FpQKSQbN&quot;),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: &quot;ヤキモチ&quot;,
						author: &quot;たかはし ゆう&quot;,
						url: &quot;http://cdn.kingmui.cn/%E3%83%A4%E3%82%AD%E3%83%A2%E3%83%81.mp3&quot;,
						pic: &quot;http://cdn.kingmui.cn/takahashiyuu.jpg&quot;,
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			&lt;/script&gt;
&lt;p&gt;君が前に付き合っていた人のこと&lt;br&gt;当你向我坦白&lt;/p&gt;
&lt;p&gt;僕に打ち明けてくれたとき&lt;br&gt;你与前任的往事时&lt;/p&gt;
&lt;p&gt;素直に聴いてあげられずに&lt;br&gt;我不肯好好听下去&lt;/p&gt;
&lt;p&gt;寂しい思いをさせてしまったね&lt;br&gt;让你觉得难过了吧
    
    </summary>
    
    
      <category term="Music" scheme="http://www.kingmui.cn/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git Hook 自动部署 Hexo 到个人 VPS</title>
    <link href="http://www.kingmui.cn/2018/03/24/%E4%BD%BF%E7%94%A8%20Git%20Hook%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%20Hexo%20%E5%88%B0%E4%B8%AA%E4%BA%BA%20VPS/"/>
    <id>http://www.kingmui.cn/2018/03/24/使用 Git Hook 自动部署 Hexo 到个人 VPS/</id>
    <published>2018-03-24T07:27:03.000Z</published>
    <updated>2019-04-05T11:06:59.613Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;2017年年尾（临近农历新年），在同事的“怂恿”下，我从阿里云购买了一台服务器，用以构建个人网站。前后忙碌了一阵，今天终于搭建好服务器。现将搭建过程做个简要记录，方便日后回顾！&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;CentOS-升级-Git-到最新版本&quot;&gt;&lt;a href=&quot;#CentOS-升级-Git-到最新版本&quot; class=&quot;headerlink&quot; title=&quot;CentOS 升级 Git 到最新版本&quot;&gt;&lt;/a&gt;CentOS 升级 Git 到最新版本&lt;/h3&gt;&lt;p&gt;CentOS 上的 Git 最新版本只有1.8.3，因此我们需要自己重新安装一遍 。&lt;/p&gt;
&lt;h4 id=&quot;卸载旧版本-Git&quot;&gt;&lt;a href=&quot;#卸载旧版本-Git&quot; class=&quot;headerlink&quot; title=&quot;卸载旧版本 Git&quot;&gt;&lt;/a&gt;卸载旧版本 Git&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装 Development tools&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum -y groupinstall Development tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# GCC 用于编译安装包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install gcc perl-ExtUtils-MakeMaker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# *卸载 CentOS 自带的老版本 Git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum -y remove git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装前环境配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc xmlto perl-devel perl-CPAN autoconf*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 系统检测(CentOS 7.4 64位)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat /etc/centos-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CentOS Linux release 7.4.1708 (Core)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ uname -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux rmhost 3.10.0-693.2.2.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Tue Sep 12 22:26:13 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.kingmui.cn/tags/Hexo/"/>
    
      <category term="Git" scheme="http://www.kingmui.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript并非所有的东西都是对象</title>
    <link href="http://www.kingmui.cn/2018/01/19/JavaScript%E5%B9%B6%E9%9D%9E%E6%89%80%E6%9C%89%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1/"/>
    <id>http://www.kingmui.cn/2018/01/19/JavaScript并非所有的东西都是对象/</id>
    <published>2018-01-19T02:14:12.000Z</published>
    <updated>2019-04-05T11:08:53.568Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;虽然很多语言宣称：“一切皆是对象”，但在 javascript 中，并不是所有的值都是对象。这篇博文解释了 javascript 中的两种值类型：原始值（primitive）和对象（object），以及混合使用两种类型时的注意事项。&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;原始值-vs-对象&quot;&gt;&lt;a href=&quot;#原始值-vs-对象&quot; class=&quot;headerlink&quot; title=&quot;原始值 vs 对象&quot;&gt;&lt;/a&gt;原始值 vs 对象&lt;/h3&gt;&lt;p&gt;javascript 中的值可以被划分为两大类：原始值（primitive）和对象（object）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面的值是原始值。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;数字：在 JavaScript 中所有的数字都是浮点数&lt;/li&gt;
&lt;li&gt;布尔值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://www.kingmui.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Web 存储</title>
    <link href="http://www.kingmui.cn/2017/11/03/HTML5Web%E5%AD%98%E5%82%A8/"/>
    <id>http://www.kingmui.cn/2017/11/03/HTML5Web存储/</id>
    <published>2017-11-03T03:02:55.000Z</published>
    <updated>2019-04-05T11:06:59.457Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各式各样的需求，会经常性地在本地存储大量的数据。传统方式我们是以document.cookie来进行存储的，但是由于cookie的存储大小只有4k左右，并且解析也相当的复杂，每一次发送请求还会携带上cookie，这不仅会造成带宽的浪费，还会给开发者带来诸多不便。在此窘境下，HTML5规范提出了新的解决方案——Web存储。Web存储是将数据存储到用户的电脑上，这样不仅可以缓解服务器压力，同时也提高了用户体验。在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;cookie概念&quot;&gt;&lt;a href=&quot;#cookie概念&quot; class=&quot;headerlink&quot; title=&quot;cookie概念&quot;&gt;&lt;/a&gt;cookie概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cookie是客户端保持状态的解决方案。cookie存储了服务端发送给客户端的一些特殊信息，这些信息以文本的方式存储在客户端。每当客户端向服务端发送请求时，&lt;strong&gt;cookie数据始终会在同源的http请求中携带（即使不需要）&lt;/strong&gt;，即cookie会在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发送给服务器，仅会在本地存储。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://www.kingmui.cn/tags/HTML5/"/>
    
      <category term="Web存储" scheme="http://www.kingmui.cn/tags/Web%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
</feed>
